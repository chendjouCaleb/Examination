// <auto-generated />
using System;
using Exam.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Exam.Migrations
{
    [DbContext(typeof(PersistenceContext))]
    [Migration("20200622075756_Examination_Speciality_Update")]
    partial class Examination_Speciality_Update
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Exam.Entities.Admin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<string>("RegisterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Exam.Entities.Application", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ExaminationId")
                        .HasColumnType("bigint");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProcessUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SpecialityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("StudentId")
                        .IsUnique()
                        .HasFilter("[StudentId] IS NOT NULL");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Exam.Entities.Contest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PaperId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Resolved")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PaperId");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("Exam.Entities.Corrector", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ExaminationId")
                        .HasColumnType("bigint");

                    b.Property<int>("PaperCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TestGroupCorrectorCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.ToTable("Correctors");
                });

            modelBuilder.Entity("Exam.Entities.Examination", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AcceptedApplicationCount")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationCount")
                        .HasColumnType("int");

                    b.Property<int>("ClosedTestCount")
                        .HasColumnType("int");

                    b.Property<int>("CorrectorCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupCount")
                        .HasColumnType("int");

                    b.Property<bool>("Grouped")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastGroupingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NonGroupedStudentsCount")
                        .HasColumnType("int");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<int>("PrincipalCount")
                        .HasColumnType("int");

                    b.Property<int>("ProgressTestCount")
                        .HasColumnType("int");

                    b.Property<string>("RegisterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RejectedApplicationCount")
                        .HasColumnType("int");

                    b.Property<bool>("RequireSpeciality")
                        .HasColumnType("bit");

                    b.Property<int>("ReviewAverage")
                        .HasColumnType("int");

                    b.Property<int>("ReviewCount")
                        .HasColumnType("int");

                    b.Property<int>("SecretaryCount")
                        .HasColumnType("int");

                    b.Property<int>("SpecialityCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentCount")
                        .HasColumnType("int");

                    b.Property<int>("SupervisorCount")
                        .HasColumnType("int");

                    b.Property<int>("TestCount")
                        .HasColumnType("int");

                    b.Property<int>("WaitingTestCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("Exam.Entities.ExaminationReview", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ExaminationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Score")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.ToTable("ExaminationReviews");
                });

            modelBuilder.Entity("Exam.Entities.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ExaminationId")
                        .HasColumnType("bigint");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("RoomId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SpecialityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Exam.Entities.Organisation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AdminCount")
                        .HasColumnType("bigint");

                    b.Property<string>("AdminUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ExaminationCount")
                        .HasColumnType("bigint");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("RoomCount")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("Exam.Entities.Paper", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Anonymity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollectorUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContestCount")
                        .HasColumnType("int");

                    b.Property<string>("CorrectorComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectorUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaperFileCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewCount")
                        .HasColumnType("int");

                    b.Property<double?>("Score")
                        .HasColumnType("float");

                    b.Property<string>("SecretaryComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecretaryUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<string>("SupervisorComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupervisorUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TestGroupCorrectorId")
                        .HasColumnType("bigint");

                    b.Property<long>("TestGroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TestGroupSecretaryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TestGroupSupervisorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TestGroupCorrectorId");

                    b.HasIndex("TestGroupId");

                    b.HasIndex("TestGroupSecretaryId");

                    b.HasIndex("TestGroupSupervisorId");

                    b.ToTable("Papers");
                });

            modelBuilder.Entity("Exam.Entities.PaperFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Corrected")
                        .HasColumnType("bit");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PaperId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaperId");

                    b.ToTable("PaperFiles");
                });

            modelBuilder.Entity("Exam.Entities.PaperReview", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PaperId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Score")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaperId");

                    b.ToTable("PaperReviews");
                });

            modelBuilder.Entity("Exam.Entities.Principal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ExaminationId")
                        .HasColumnType("bigint");

                    b.Property<string>("RegisterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.ToTable("Principals");
                });

            modelBuilder.Entity("Exam.Entities.Room", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Capacity")
                        .HasColumnType("bigint");

                    b.Property<long>("GroupCount")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<string>("RegisterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("TestGroupCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Exam.Entities.Score", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Radical")
                        .HasColumnType("float");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("TestId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("Exam.Entities.ScorePaper", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("PaperId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ScoreId")
                        .HasColumnType("bigint");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PaperId");

                    b.HasIndex("ScoreId");

                    b.ToTable("ScorePapers");
                });

            modelBuilder.Entity("Exam.Entities.Secretary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ExaminationId")
                        .HasColumnType("bigint");

                    b.Property<string>("RegisterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.ToTable("Secretaries");
                });

            modelBuilder.Entity("Exam.Entities.Speciality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AcceptedApplicationCount")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationCount")
                        .HasColumnType("int");

                    b.Property<long?>("ExaminationId")
                        .HasColumnType("bigint");

                    b.Property<int>("GroupCount")
                        .HasColumnType("int");

                    b.Property<bool>("Grouped")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastGroupingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RejectedApplicationCount")
                        .HasColumnType("int");

                    b.Property<int>("StudentCount")
                        .HasColumnType("int");

                    b.Property<int>("TestCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("Exam.Entities.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ExaminationId")
                        .HasColumnType("bigint");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<int>("GroupIndex")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int>("PaperCount")
                        .HasColumnType("int");

                    b.Property<string>("RegisterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SpecialityId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Exam.Entities.Supervisor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ExaminationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.ToTable("Supervisors");
                });

            modelBuilder.Entity("Exam.Entities.Test", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Coefficient")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ExaminationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Radical")
                        .HasColumnType("int");

                    b.Property<string>("RegisterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewCount")
                        .HasColumnType("int");

                    b.Property<long?>("SpecialityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("UseAnonymity")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Exam.Entities.TestGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<long>("PaperCount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("RoomId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("TestId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoomId");

                    b.HasIndex("TestId");

                    b.ToTable("TestGroups");
                });

            modelBuilder.Entity("Exam.Entities.TestGroupCorrector", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CorrectorId")
                        .HasColumnType("bigint");

                    b.Property<int>("PaperCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("TestGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CorrectorId");

                    b.HasIndex("TestGroupId");

                    b.ToTable("TestGroupCorrectors");
                });

            modelBuilder.Entity("Exam.Entities.TestGroupSecretary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PaperCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SecretaryId")
                        .HasColumnType("bigint");

                    b.Property<long>("TestGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SecretaryId");

                    b.HasIndex("TestGroupId");

                    b.ToTable("TestGroupSecretaries");
                });

            modelBuilder.Entity("Exam.Entities.TestGroupSupervisor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsPrincipal")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SupervisorId")
                        .HasColumnType("bigint");

                    b.Property<long>("TestGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SupervisorId");

                    b.HasIndex("TestGroupId");

                    b.ToTable("TestGroupSupervisors");
                });

            modelBuilder.Entity("Exam.Entities.TestReview", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Score")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TestId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("TestReviews");
                });

            modelBuilder.Entity("Exam.Entities.Admin", b =>
                {
                    b.HasOne("Exam.Entities.Organisation", "Organisation")
                        .WithMany("Admins")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exam.Entities.Application", b =>
                {
                    b.HasOne("Exam.Entities.Examination", "Examination")
                        .WithMany("Applications")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam.Entities.Speciality", "Speciality")
                        .WithMany("Applications")
                        .HasForeignKey("SpecialityId");

                    b.HasOne("Exam.Entities.Student", "Student")
                        .WithOne("Application")
                        .HasForeignKey("Exam.Entities.Application", "StudentId");
                });

            modelBuilder.Entity("Exam.Entities.Contest", b =>
                {
                    b.HasOne("Exam.Entities.Paper", "Paper")
                        .WithMany("Contests")
                        .HasForeignKey("PaperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exam.Entities.Corrector", b =>
                {
                    b.HasOne("Exam.Entities.Examination", "Examination")
                        .WithMany("Correctors")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exam.Entities.Examination", b =>
                {
                    b.HasOne("Exam.Entities.Organisation", "Organisation")
                        .WithMany("Examinations")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exam.Entities.ExaminationReview", b =>
                {
                    b.HasOne("Exam.Entities.Examination", "Examination")
                        .WithMany("Reviews")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exam.Entities.Group", b =>
                {
                    b.HasOne("Exam.Entities.Examination", "Examination")
                        .WithMany("Groups")
                        .HasForeignKey("ExaminationId");

                    b.HasOne("Exam.Entities.Room", "Room")
                        .WithMany("Groups")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam.Entities.Speciality", "Speciality")
                        .WithMany("Groups")
                        .HasForeignKey("SpecialityId");
                });

            modelBuilder.Entity("Exam.Entities.Paper", b =>
                {
                    b.HasOne("Exam.Entities.Student", "Student")
                        .WithMany("Papers")
                        .HasForeignKey("StudentId");

                    b.HasOne("Exam.Entities.TestGroupCorrector", "TestGroupCorrector")
                        .WithMany("Papers")
                        .HasForeignKey("TestGroupCorrectorId");

                    b.HasOne("Exam.Entities.TestGroup", "TestGroup")
                        .WithMany("Papers")
                        .HasForeignKey("TestGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam.Entities.TestGroupSecretary", "TestGroupSecretary")
                        .WithMany("Papers")
                        .HasForeignKey("TestGroupSecretaryId");

                    b.HasOne("Exam.Entities.TestGroupSupervisor", "TestGroupSupervisor")
                        .WithMany()
                        .HasForeignKey("TestGroupSupervisorId");
                });

            modelBuilder.Entity("Exam.Entities.PaperFile", b =>
                {
                    b.HasOne("Exam.Entities.Paper", "Paper")
                        .WithMany("PaperFiles")
                        .HasForeignKey("PaperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exam.Entities.PaperReview", b =>
                {
                    b.HasOne("Exam.Entities.Paper", "Paper")
                        .WithMany("Reviews")
                        .HasForeignKey("PaperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exam.Entities.Principal", b =>
                {
                    b.HasOne("Exam.Entities.Examination", "Examination")
                        .WithMany("Principals")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exam.Entities.Room", b =>
                {
                    b.HasOne("Exam.Entities.Organisation", "Organisation")
                        .WithMany("Rooms")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exam.Entities.Score", b =>
                {
                    b.HasOne("Exam.Entities.Test", "Test")
                        .WithMany("Scores")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exam.Entities.ScorePaper", b =>
                {
                    b.HasOne("Exam.Entities.Paper", "Paper")
                        .WithMany("ScorePapers")
                        .HasForeignKey("PaperId");

                    b.HasOne("Exam.Entities.Score", "Score")
                        .WithMany("ScorePapers")
                        .HasForeignKey("ScoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exam.Entities.Secretary", b =>
                {
                    b.HasOne("Exam.Entities.Examination", "Examination")
                        .WithMany("Secretaries")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exam.Entities.Speciality", b =>
                {
                    b.HasOne("Exam.Entities.Examination", "Examination")
                        .WithMany("Specialities")
                        .HasForeignKey("ExaminationId");
                });

            modelBuilder.Entity("Exam.Entities.Student", b =>
                {
                    b.HasOne("Exam.Entities.Examination", "Examination")
                        .WithMany("Students")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam.Entities.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId");

                    b.HasOne("Exam.Entities.Speciality", "Speciality")
                        .WithMany("Students")
                        .HasForeignKey("SpecialityId");
                });

            modelBuilder.Entity("Exam.Entities.Supervisor", b =>
                {
                    b.HasOne("Exam.Entities.Examination", "Examination")
                        .WithMany("Supervisors")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exam.Entities.Test", b =>
                {
                    b.HasOne("Exam.Entities.Examination", "Examination")
                        .WithMany("Tests")
                        .HasForeignKey("ExaminationId");

                    b.HasOne("Exam.Entities.Speciality", "Speciality")
                        .WithMany("Tests")
                        .HasForeignKey("SpecialityId");
                });

            modelBuilder.Entity("Exam.Entities.TestGroup", b =>
                {
                    b.HasOne("Exam.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("Exam.Entities.Room", "Room")
                        .WithMany("TestGroups")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam.Entities.Test", "Test")
                        .WithMany("Groups")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exam.Entities.TestGroupCorrector", b =>
                {
                    b.HasOne("Exam.Entities.Corrector", "Corrector")
                        .WithMany("TestGroupCorrectors")
                        .HasForeignKey("CorrectorId");

                    b.HasOne("Exam.Entities.TestGroup", "TestGroup")
                        .WithMany("TestGroupCorrectors")
                        .HasForeignKey("TestGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exam.Entities.TestGroupSecretary", b =>
                {
                    b.HasOne("Exam.Entities.Secretary", "Secretary")
                        .WithMany()
                        .HasForeignKey("SecretaryId");

                    b.HasOne("Exam.Entities.TestGroup", "TestGroup")
                        .WithMany("TestGroupSecretaries")
                        .HasForeignKey("TestGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exam.Entities.TestGroupSupervisor", b =>
                {
                    b.HasOne("Exam.Entities.Supervisor", "Supervisor")
                        .WithMany("TestGroupSupervisors")
                        .HasForeignKey("SupervisorId");

                    b.HasOne("Exam.Entities.TestGroup", "TestGroup")
                        .WithMany("TestGroupSupervisors")
                        .HasForeignKey("TestGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exam.Entities.TestReview", b =>
                {
                    b.HasOne("Exam.Entities.Test", "Test")
                        .WithMany("Reviews")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
