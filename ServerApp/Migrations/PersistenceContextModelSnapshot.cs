// <auto-generated />
using System;
using Exam.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Exam.Migrations
{
    [DbContext(typeof(PersistenceContext))]
    partial class PersistenceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Exam.Entities.Application", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool>("HasImage")
                        .HasColumnType("bit");

                    b.Property<long>("LevelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LevelSpecialityId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProcessUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LevelId");

                    b.HasIndex("LevelSpecialityId");

                    b.HasIndex("StudentId")
                        .IsUnique()
                        .HasFilter("[StudentId] IS NOT NULL");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Exam.Entities.Contest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PaperId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Resolved")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PaperId");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("Exam.Entities.Corrector", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("PaperCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TestGroupCorrectorCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.ToTable("Correctors");
                });

            modelBuilder.Entity("Exam.Entities.Courses.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ChapterText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Coefficient")
                        .HasColumnType("bigint");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGeneral")
                        .HasColumnType("bit");

                    b.Property<long?>("LevelId")
                        .HasColumnType("bigint");

                    b.Property<bool>("MultipleScore")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PracticalWork")
                        .HasColumnType("bit");

                    b.Property<long>("Radical")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LevelId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Exam.Entities.Courses.CourseHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndHour")
                        .HasColumnType("time");

                    b.Property<bool>("Lecture")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("RoomId")
                        .HasColumnType("bigint");

                    b.Property<long>("SemesterCourseId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SemesterCourseTeacherId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("StartHour")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("SemesterCourseId");

                    b.HasIndex("SemesterCourseTeacherId");

                    b.ToTable("CourseHours");
                });

            modelBuilder.Entity("Exam.Entities.Courses.CourseLevelSpeciality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<long>("LevelSpecialityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LevelSpecialityId");

                    b.ToTable("CourseLevelSpecialities");
                });

            modelBuilder.Entity("Exam.Entities.Courses.CourseSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("CourseHourId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Lecture")
                        .HasColumnType("bit");

                    b.Property<string>("Objective")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Presence")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Report")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RoomId")
                        .HasColumnType("bigint");

                    b.Property<long>("SemesterCourseId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SemesterCourseTeacherId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseHourId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SemesterCourseId");

                    b.HasIndex("SemesterCourseTeacherId");

                    b.ToTable("CourseSessions");
                });

            modelBuilder.Entity("Exam.Entities.Courses.CourseTeacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPrincipal")
                        .HasColumnType("bit");

                    b.Property<bool>("Lecture")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Tutorial")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("CourseTeachers");
                });

            modelBuilder.Entity("Exam.Entities.Courses.Score", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Radical")
                        .HasColumnType("float");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("Exam.Entities.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Acronym")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasCoverImage")
                        .HasColumnType("bit");

                    b.Property<bool>("HasImage")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrincipalUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Exam.Entities.Examination", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SemesterId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("Exam.Entities.ExaminationDepartment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ExaminationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SemesterDepartmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.HasIndex("SemesterDepartmentId");

                    b.ToTable("ExaminationDepartments");
                });

            modelBuilder.Entity("Exam.Entities.ExaminationLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ExaminationDepartmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SemesterLevelId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationDepartmentId");

                    b.HasIndex("SemesterLevelId");

                    b.ToTable("ExaminationLevels");
                });

            modelBuilder.Entity("Exam.Entities.ExaminationLevelSpeciality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("ExaminationLevelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ExaminationSpecialityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SemesterLevelSpecialityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationLevelId");

                    b.HasIndex("ExaminationSpecialityId");

                    b.HasIndex("SemesterLevelSpecialityId");

                    b.ToTable("ExaminationLevelSpecialities");
                });

            modelBuilder.Entity("Exam.Entities.ExaminationSpeciality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("ExaminationDepartmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SemesterSpecialityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationDepartmentId");

                    b.HasIndex("SemesterSpecialityId");

                    b.ToTable("ExaminationSpecialities");
                });

            modelBuilder.Entity("Exam.Entities.ExaminationStudent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("ExaminationLevelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ExaminationLevelSpecialityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("SemesterStudentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationLevelId");

                    b.HasIndex("ExaminationLevelSpecialityId");

                    b.HasIndex("SemesterStudentId");

                    b.ToTable("ExaminationStudents");
                });

            modelBuilder.Entity("Exam.Entities.Level", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("Exam.Entities.LevelSpeciality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("LevelId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SpecialityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("LevelSpecialities");
                });

            modelBuilder.Entity("Exam.Entities.Member", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Exam.Entities.Paper", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Anonymity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollectorUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContestCount")
                        .HasColumnType("int");

                    b.Property<string>("CorrectorComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectorUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ExaminationStudentId")
                        .HasColumnType("bigint");

                    b.Property<int?>("GroupIndex")
                        .HasColumnType("int");

                    b.Property<int>("PaperFileCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Score")
                        .HasColumnType("float");

                    b.Property<string>("SecretaryComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecretaryUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SupervisorComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupervisorUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TestGroupCorrectorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TestGroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TestGroupSecretaryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TestGroupSupervisorId")
                        .HasColumnType("bigint");

                    b.Property<long>("TestId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TestLevelSpecialityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationStudentId");

                    b.HasIndex("TestGroupCorrectorId");

                    b.HasIndex("TestGroupId");

                    b.HasIndex("TestGroupSecretaryId");

                    b.HasIndex("TestGroupSupervisorId");

                    b.HasIndex("TestId");

                    b.HasIndex("TestLevelSpecialityId");

                    b.ToTable("Papers");
                });

            modelBuilder.Entity("Exam.Entities.PaperFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Corrected")
                        .HasColumnType("bit");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PaperId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaperId");

                    b.ToTable("PaperFiles");
                });

            modelBuilder.Entity("Exam.Entities.Periods.Semester", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("YearId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("YearId");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("Exam.Entities.Periods.SemesterCourse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("Coefficient")
                        .HasColumnType("bigint");

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsGeneral")
                        .HasColumnType("bit");

                    b.Property<bool>("PracticalWork")
                        .HasColumnType("bit");

                    b.Property<long>("Radical")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<long?>("SemesterLevelId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("SemesterLevelId");

                    b.ToTable("SemesterCourses");
                });

            modelBuilder.Entity("Exam.Entities.Periods.SemesterCourseLevelSpeciality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("CourseLevelSpecialityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SemesterCourseId")
                        .HasColumnType("bigint");

                    b.Property<long>("SemesterLevelSpecialityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CourseLevelSpecialityId");

                    b.HasIndex("SemesterCourseId");

                    b.HasIndex("SemesterLevelSpecialityId");

                    b.ToTable("SemesterCourseLevelSpecialities");
                });

            modelBuilder.Entity("Exam.Entities.Periods.SemesterCourseTeacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsPrincipal")
                        .HasColumnType("bit");

                    b.Property<bool>("Lecture")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SemesterCourseId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SemesterTeacherId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Tutorial")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("SemesterCourseId");

                    b.HasIndex("SemesterTeacherId");

                    b.ToTable("SemesterCourseTeachers");
                });

            modelBuilder.Entity("Exam.Entities.Periods.SemesterDepartment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<bool>("Opened")
                        .HasColumnType("bit");

                    b.Property<bool>("Pending")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SemesterId")
                        .HasColumnType("bigint");

                    b.Property<long?>("YearDepartmentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.HasIndex("YearDepartmentId");

                    b.ToTable("SemesterDepartments");
                });

            modelBuilder.Entity("Exam.Entities.Periods.SemesterLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<bool>("Opened")
                        .HasColumnType("bit");

                    b.Property<bool>("Pending")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SemesterDepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("YearLevelId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SemesterDepartmentId");

                    b.HasIndex("YearLevelId");

                    b.ToTable("SemesterLevels");
                });

            modelBuilder.Entity("Exam.Entities.Periods.SemesterLevelSpeciality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<bool>("Opened")
                        .HasColumnType("bit");

                    b.Property<bool>("Pending")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SemesterLevelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SemesterSpecialityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("YearLevelSpecialityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SemesterLevelId");

                    b.HasIndex("SemesterSpecialityId");

                    b.HasIndex("YearLevelSpecialityId");

                    b.ToTable("SemesterLevelSpecialities");
                });

            modelBuilder.Entity("Exam.Entities.Periods.SemesterSpeciality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<bool>("Opened")
                        .HasColumnType("bit");

                    b.Property<bool>("Pending")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SemesterDepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("YearSpecialityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SemesterDepartmentId");

                    b.HasIndex("YearSpecialityId");

                    b.ToTable("SemesterSpecialities");
                });

            modelBuilder.Entity("Exam.Entities.Periods.SemesterStudent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SemesterLevelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SemesterLevelSpecialityId")
                        .HasColumnType("bigint");

                    b.Property<long>("YearStudentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SemesterLevelId");

                    b.HasIndex("SemesterLevelSpecialityId");

                    b.HasIndex("YearStudentId");

                    b.ToTable("SemesterStudent");
                });

            modelBuilder.Entity("Exam.Entities.Periods.SemesterTeacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("SemesterDepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("YearTeacherId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SemesterDepartmentId");

                    b.HasIndex("YearTeacherId");

                    b.ToTable("SemesterTeachers");
                });

            modelBuilder.Entity("Exam.Entities.Periods.Year", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Years");
                });

            modelBuilder.Entity("Exam.Entities.Periods.YearDepartment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Opened")
                        .HasColumnType("bit");

                    b.Property<bool>("Pending")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("YearId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("YearId");

                    b.ToTable("YearDepartments");
                });

            modelBuilder.Entity("Exam.Entities.Periods.YearLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<long?>("LevelId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Opened")
                        .HasColumnType("bit");

                    b.Property<bool>("Pending")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("YearDepartmentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("YearDepartmentId");

                    b.ToTable("YearLevels");
                });

            modelBuilder.Entity("Exam.Entities.Periods.YearLevelSpeciality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<long?>("LevelSpecialityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Opened")
                        .HasColumnType("bit");

                    b.Property<bool>("Pending")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("YearLevelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("YearSpecialityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LevelSpecialityId");

                    b.HasIndex("YearLevelId");

                    b.HasIndex("YearSpecialityId");

                    b.ToTable("YearLevelSpecialities");
                });

            modelBuilder.Entity("Exam.Entities.Periods.YearSpeciality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<bool>("Opened")
                        .HasColumnType("bit");

                    b.Property<bool>("Pending")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SpecialityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("YearDepartmentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("YearDepartmentId");

                    b.ToTable("YearSpecialities");
                });

            modelBuilder.Entity("Exam.Entities.Periods.YearStudent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long>("YearLevelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("YearLevelSpecialityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("YearLevelId");

                    b.HasIndex("YearLevelSpecialityId");

                    b.ToTable("YearStudents");
                });

            modelBuilder.Entity("Exam.Entities.Periods.YearTeacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<long>("YearDepartmentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.HasIndex("YearDepartmentId");

                    b.ToTable("YearTeachers");
                });

            modelBuilder.Entity("Exam.Entities.Planner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<string>("RegisterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Planners");
                });

            modelBuilder.Entity("Exam.Entities.Principal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<string>("RegisterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.ToTable("Principals");
                });

            modelBuilder.Entity("Exam.Entities.Room", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Capacity")
                        .HasColumnType("bigint");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LevelId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LevelId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Exam.Entities.School", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Acronym")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasCoverImage")
                        .HasColumnType("bit");

                    b.Property<bool>("HasImage")
                        .HasColumnType("bit");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PrincipalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PrincipalId1")
                        .HasColumnType("bigint");

                    b.Property<string>("PrincipalUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PrincipalId1");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("Exam.Entities.ScorePaper", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("PaperId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("TestScoreId")
                        .HasColumnType("bigint");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PaperId");

                    b.HasIndex("TestScoreId");

                    b.ToTable("ScorePapers");
                });

            modelBuilder.Entity("Exam.Entities.Secretary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<string>("RegisterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("MemberId");

                    b.ToTable("Secretaries");
                });

            modelBuilder.Entity("Exam.Entities.Speciality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("Exam.Entities.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool>("HasImage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("LevelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LevelSpecialityId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LevelId");

                    b.HasIndex("LevelSpecialityId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Exam.Entities.Supervisor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("MemberId");

                    b.ToTable("Supervisors");
                });

            modelBuilder.Entity("Exam.Entities.Teacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("MemberId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Exam.Entities.Test", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Coefficient")
                        .HasColumnType("bigint");

                    b.Property<long>("ConsignedPaperCount")
                        .HasColumnType("bigint");

                    b.Property<long>("CorrectedPaperCount")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ExaminationLevelId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Grouped")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGeneral")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastGroupingDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MultipleScore")
                        .HasColumnType("bit");

                    b.Property<long>("NotGroupedStudentCount")
                        .HasColumnType("bigint");

                    b.Property<long>("PaperCount")
                        .HasColumnType("bigint");

                    b.Property<long>("PresentPaperCount")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Radical")
                        .HasColumnType("bigint");

                    b.Property<string>("RegisterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SemesterCourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("TestGroupCount")
                        .HasColumnType("bigint");

                    b.Property<bool>("UseAnonymity")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationLevelId");

                    b.HasIndex("SemesterCourseId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Exam.Entities.TestGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("Capacity")
                        .HasColumnType("bigint");

                    b.Property<long>("ConsignedPaperCount")
                        .HasColumnType("bigint");

                    b.Property<long>("CorrectedPaperCount")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<long>("PaperCount")
                        .HasColumnType("bigint");

                    b.Property<long>("PresentPaperCount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("RoomId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("TestId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("TestId");

                    b.ToTable("TestGroups");
                });

            modelBuilder.Entity("Exam.Entities.TestGroupCorrector", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CorrectorId")
                        .HasColumnType("bigint");

                    b.Property<int>("PaperCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("TestGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CorrectorId");

                    b.HasIndex("TestGroupId");

                    b.ToTable("TestGroupCorrectors");
                });

            modelBuilder.Entity("Exam.Entities.TestGroupSecretary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("PaperCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SecretaryId")
                        .HasColumnType("bigint");

                    b.Property<long>("TestGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SecretaryId");

                    b.HasIndex("TestGroupId");

                    b.ToTable("TestGroupSecretaries");
                });

            modelBuilder.Entity("Exam.Entities.TestGroupSupervisor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsPrincipal")
                        .HasColumnType("bit");

                    b.Property<long>("PaperCount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SupervisorId")
                        .HasColumnType("bigint");

                    b.Property<long>("TestGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SupervisorId");

                    b.HasIndex("TestGroupId");

                    b.ToTable("TestGroupSupervisors");
                });

            modelBuilder.Entity("Exam.Entities.TestLevelSpeciality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("ExaminationLevelSpecialityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SemesterCourseLevelSpecialityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TestId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationLevelSpecialityId");

                    b.HasIndex("SemesterCourseLevelSpecialityId");

                    b.HasIndex("TestId");

                    b.ToTable("TestLevelSpecialities");
                });

            modelBuilder.Entity("Exam.Entities.TestScore", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Radical")
                        .HasColumnType("float");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("TestId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("TestScores");
                });

            modelBuilder.Entity("Exam.Entities.Application", b =>
                {
                    b.HasOne("Exam.Entities.Department", null)
                        .WithMany("Applications")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Exam.Entities.Level", "Level")
                        .WithMany("Applications")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam.Entities.LevelSpeciality", "LevelSpeciality")
                        .WithMany("Applications")
                        .HasForeignKey("LevelSpecialityId");

                    b.HasOne("Exam.Entities.Student", "Student")
                        .WithOne("Application")
                        .HasForeignKey("Exam.Entities.Application", "StudentId");

                    b.Navigation("Level");

                    b.Navigation("LevelSpeciality");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Exam.Entities.Contest", b =>
                {
                    b.HasOne("Exam.Entities.Paper", "Paper")
                        .WithMany("Contests")
                        .HasForeignKey("PaperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paper");
                });

            modelBuilder.Entity("Exam.Entities.Corrector", b =>
                {
                    b.HasOne("Exam.Entities.Department", "Department")
                        .WithMany("Correctors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam.Entities.Member", "Member")
                        .WithOne("Corrector")
                        .HasForeignKey("Exam.Entities.Corrector", "MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Exam.Entities.Courses.Course", b =>
                {
                    b.HasOne("Exam.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Exam.Entities.Level", "Level")
                        .WithMany("Courses")
                        .HasForeignKey("LevelId");

                    b.HasOne("Exam.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Level");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Exam.Entities.Courses.CourseHour", b =>
                {
                    b.HasOne("Exam.Entities.Room", "Room")
                        .WithMany("CourseHours")
                        .HasForeignKey("RoomId");

                    b.HasOne("Exam.Entities.Periods.SemesterCourse", "SemesterCourse")
                        .WithMany("CourseHours")
                        .HasForeignKey("SemesterCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam.Entities.Periods.SemesterCourseTeacher", "SemesterCourseTeacher")
                        .WithMany("CourseHours")
                        .HasForeignKey("SemesterCourseTeacherId");

                    b.Navigation("Room");

                    b.Navigation("SemesterCourse");

                    b.Navigation("SemesterCourseTeacher");
                });

            modelBuilder.Entity("Exam.Entities.Courses.CourseLevelSpeciality", b =>
                {
                    b.HasOne("Exam.Entities.Courses.Course", "Course")
                        .WithMany("CourseLevelSpecialities")
                        .HasForeignKey("CourseId");

                    b.HasOne("Exam.Entities.LevelSpeciality", "LevelSpeciality")
                        .WithMany("CourseLevelSpecialities")
                        .HasForeignKey("LevelSpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("LevelSpeciality");
                });

            modelBuilder.Entity("Exam.Entities.Courses.CourseSession", b =>
                {
                    b.HasOne("Exam.Entities.Courses.CourseHour", "CourseHour")
                        .WithMany("CourseSessions")
                        .HasForeignKey("CourseHourId");

                    b.HasOne("Exam.Entities.Room", "Room")
                        .WithMany("CourseSessions")
                        .HasForeignKey("RoomId");

                    b.HasOne("Exam.Entities.Periods.SemesterCourse", "SemesterCourse")
                        .WithMany("CourseSessions")
                        .HasForeignKey("SemesterCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam.Entities.Periods.SemesterCourseTeacher", "SemesterCourseTeacher")
                        .WithMany("CourseSessions")
                        .HasForeignKey("SemesterCourseTeacherId");

                    b.Navigation("CourseHour");

                    b.Navigation("Room");

                    b.Navigation("SemesterCourse");

                    b.Navigation("SemesterCourseTeacher");
                });

            modelBuilder.Entity("Exam.Entities.Courses.CourseTeacher", b =>
                {
                    b.HasOne("Exam.Entities.Courses.Course", "Course")
                        .WithMany("CourseTeachers")
                        .HasForeignKey("CourseId");

                    b.HasOne("Exam.Entities.Teacher", "Teacher")
                        .WithMany("CourseTeachers")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Exam.Entities.Courses.Score", b =>
                {
                    b.HasOne("Exam.Entities.Courses.Course", "Course")
                        .WithMany("Scores")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Exam.Entities.Department", b =>
                {
                    b.HasOne("Exam.Entities.School", "School")
                        .WithMany("Departments")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Exam.Entities.Examination", b =>
                {
                    b.HasOne("Exam.Entities.Periods.Semester", "Semester")
                        .WithMany("Examinations")
                        .HasForeignKey("SemesterId");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("Exam.Entities.ExaminationDepartment", b =>
                {
                    b.HasOne("Exam.Entities.Examination", "Examination")
                        .WithMany("ExaminationDepartments")
                        .HasForeignKey("ExaminationId");

                    b.HasOne("Exam.Entities.Periods.SemesterDepartment", "SemesterDepartment")
                        .WithMany("ExaminationDepartments")
                        .HasForeignKey("SemesterDepartmentId");

                    b.Navigation("Examination");

                    b.Navigation("SemesterDepartment");
                });

            modelBuilder.Entity("Exam.Entities.ExaminationLevel", b =>
                {
                    b.HasOne("Exam.Entities.ExaminationDepartment", "ExaminationDepartment")
                        .WithMany("ExaminationLevels")
                        .HasForeignKey("ExaminationDepartmentId");

                    b.HasOne("Exam.Entities.Periods.SemesterLevel", "SemesterLevel")
                        .WithMany("ExaminationLevels")
                        .HasForeignKey("SemesterLevelId");

                    b.Navigation("ExaminationDepartment");

                    b.Navigation("SemesterLevel");
                });

            modelBuilder.Entity("Exam.Entities.ExaminationLevelSpeciality", b =>
                {
                    b.HasOne("Exam.Entities.ExaminationLevel", "ExaminationLevel")
                        .WithMany("ExaminationLevelSpecialities")
                        .HasForeignKey("ExaminationLevelId");

                    b.HasOne("Exam.Entities.ExaminationSpeciality", "ExaminationSpeciality")
                        .WithMany("ExaminationLevelSpecialities")
                        .HasForeignKey("ExaminationSpecialityId");

                    b.HasOne("Exam.Entities.Periods.SemesterLevelSpeciality", "SemesterLevelSpeciality")
                        .WithMany("ExaminationLevelSpecialities")
                        .HasForeignKey("SemesterLevelSpecialityId");

                    b.Navigation("ExaminationLevel");

                    b.Navigation("ExaminationSpeciality");

                    b.Navigation("SemesterLevelSpeciality");
                });

            modelBuilder.Entity("Exam.Entities.ExaminationSpeciality", b =>
                {
                    b.HasOne("Exam.Entities.ExaminationDepartment", "ExaminationDepartment")
                        .WithMany("ExaminationSpecialities")
                        .HasForeignKey("ExaminationDepartmentId");

                    b.HasOne("Exam.Entities.Periods.SemesterSpeciality", "SemesterSpeciality")
                        .WithMany("ExaminationSpecialities")
                        .HasForeignKey("SemesterSpecialityId");

                    b.Navigation("ExaminationDepartment");

                    b.Navigation("SemesterSpeciality");
                });

            modelBuilder.Entity("Exam.Entities.ExaminationStudent", b =>
                {
                    b.HasOne("Exam.Entities.ExaminationLevel", "ExaminationLevel")
                        .WithMany("ExaminationStudents")
                        .HasForeignKey("ExaminationLevelId");

                    b.HasOne("Exam.Entities.ExaminationLevelSpeciality", "ExaminationLevelSpeciality")
                        .WithMany("ExaminationStudents")
                        .HasForeignKey("ExaminationLevelSpecialityId");

                    b.HasOne("Exam.Entities.Periods.SemesterStudent", "SemesterStudent")
                        .WithMany()
                        .HasForeignKey("SemesterStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExaminationLevel");

                    b.Navigation("ExaminationLevelSpeciality");

                    b.Navigation("SemesterStudent");
                });

            modelBuilder.Entity("Exam.Entities.Level", b =>
                {
                    b.HasOne("Exam.Entities.Department", "Department")
                        .WithMany("Levels")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Exam.Entities.LevelSpeciality", b =>
                {
                    b.HasOne("Exam.Entities.Level", "Level")
                        .WithMany("LevelSpecialities")
                        .HasForeignKey("LevelId");

                    b.HasOne("Exam.Entities.Speciality", "Speciality")
                        .WithMany("LevelSpecialities")
                        .HasForeignKey("SpecialityId");

                    b.Navigation("Level");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Exam.Entities.Member", b =>
                {
                    b.HasOne("Exam.Entities.School", "School")
                        .WithMany("Members")
                        .HasForeignKey("SchoolId");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Exam.Entities.Paper", b =>
                {
                    b.HasOne("Exam.Entities.ExaminationStudent", "ExaminationStudent")
                        .WithMany("Papers")
                        .HasForeignKey("ExaminationStudentId");

                    b.HasOne("Exam.Entities.TestGroupCorrector", "TestGroupCorrector")
                        .WithMany("Papers")
                        .HasForeignKey("TestGroupCorrectorId");

                    b.HasOne("Exam.Entities.TestGroup", "TestGroup")
                        .WithMany("Papers")
                        .HasForeignKey("TestGroupId");

                    b.HasOne("Exam.Entities.TestGroupSecretary", "TestGroupSecretary")
                        .WithMany("Papers")
                        .HasForeignKey("TestGroupSecretaryId");

                    b.HasOne("Exam.Entities.TestGroupSupervisor", "TestGroupSupervisor")
                        .WithMany()
                        .HasForeignKey("TestGroupSupervisorId");

                    b.HasOne("Exam.Entities.Test", "Test")
                        .WithMany("Papers")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam.Entities.TestLevelSpeciality", "TestLevelSpeciality")
                        .WithMany("Papers")
                        .HasForeignKey("TestLevelSpecialityId");

                    b.Navigation("ExaminationStudent");

                    b.Navigation("Test");

                    b.Navigation("TestGroup");

                    b.Navigation("TestGroupCorrector");

                    b.Navigation("TestGroupSecretary");

                    b.Navigation("TestGroupSupervisor");

                    b.Navigation("TestLevelSpeciality");
                });

            modelBuilder.Entity("Exam.Entities.PaperFile", b =>
                {
                    b.HasOne("Exam.Entities.Paper", "Paper")
                        .WithMany("PaperFiles")
                        .HasForeignKey("PaperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paper");
                });

            modelBuilder.Entity("Exam.Entities.Periods.Semester", b =>
                {
                    b.HasOne("Exam.Entities.Periods.Year", "Year")
                        .WithMany("Semesters")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Exam.Entities.Periods.SemesterCourse", b =>
                {
                    b.HasOne("Exam.Entities.Courses.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("Exam.Entities.Periods.SemesterLevel", "SemesterLevel")
                        .WithMany()
                        .HasForeignKey("SemesterLevelId");

                    b.Navigation("Course");

                    b.Navigation("SemesterLevel");
                });

            modelBuilder.Entity("Exam.Entities.Periods.SemesterCourseLevelSpeciality", b =>
                {
                    b.HasOne("Exam.Entities.Courses.CourseLevelSpeciality", "CourseLevelSpeciality")
                        .WithMany("SemesterCourseLevelSpecialities")
                        .HasForeignKey("CourseLevelSpecialityId");

                    b.HasOne("Exam.Entities.Periods.SemesterCourse", "SemesterCourse")
                        .WithMany("SemesterCourseLevelSpecialities")
                        .HasForeignKey("SemesterCourseId");

                    b.HasOne("Exam.Entities.Periods.SemesterLevelSpeciality", "SemesterLevelSpeciality")
                        .WithMany("SemesterCourseLevelSpecialities")
                        .HasForeignKey("SemesterLevelSpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseLevelSpeciality");

                    b.Navigation("SemesterCourse");

                    b.Navigation("SemesterLevelSpeciality");
                });

            modelBuilder.Entity("Exam.Entities.Periods.SemesterCourseTeacher", b =>
                {
                    b.HasOne("Exam.Entities.Periods.SemesterCourse", "SemesterCourse")
                        .WithMany()
                        .HasForeignKey("SemesterCourseId");

                    b.HasOne("Exam.Entities.Periods.SemesterTeacher", "SemesterTeacher")
                        .WithMany("SemesterCourseTeachers")
                        .HasForeignKey("SemesterTeacherId");

                    b.Navigation("SemesterCourse");

                    b.Navigation("SemesterTeacher");
                });

            modelBuilder.Entity("Exam.Entities.Periods.SemesterDepartment", b =>
                {
                    b.HasOne("Exam.Entities.Periods.Semester", "Semester")
                        .WithMany("SemesterDepartments")
                        .HasForeignKey("SemesterId");

                    b.HasOne("Exam.Entities.Periods.YearDepartment", "YearDepartment")
                        .WithMany("SemesterDepartments")
                        .HasForeignKey("YearDepartmentId");

                    b.Navigation("Semester");

                    b.Navigation("YearDepartment");
                });

            modelBuilder.Entity("Exam.Entities.Periods.SemesterLevel", b =>
                {
                    b.HasOne("Exam.Entities.Periods.SemesterDepartment", "SemesterDepartment")
                        .WithMany("SemesterLevels")
                        .HasForeignKey("SemesterDepartmentId");

                    b.HasOne("Exam.Entities.Periods.YearLevel", "YearLevel")
                        .WithMany("SemesterLevels")
                        .HasForeignKey("YearLevelId");

                    b.Navigation("SemesterDepartment");

                    b.Navigation("YearLevel");
                });

            modelBuilder.Entity("Exam.Entities.Periods.SemesterLevelSpeciality", b =>
                {
                    b.HasOne("Exam.Entities.Periods.SemesterLevel", "SemesterLevel")
                        .WithMany("SemesterLevelSpecialities")
                        .HasForeignKey("SemesterLevelId");

                    b.HasOne("Exam.Entities.Periods.SemesterSpeciality", "SemesterSpeciality")
                        .WithMany("SemesterLevelSpecialities")
                        .HasForeignKey("SemesterSpecialityId");

                    b.HasOne("Exam.Entities.Periods.YearLevelSpeciality", "YearLevelSpeciality")
                        .WithMany("SemesterLevelSpecialities")
                        .HasForeignKey("YearLevelSpecialityId");

                    b.Navigation("SemesterLevel");

                    b.Navigation("SemesterSpeciality");

                    b.Navigation("YearLevelSpeciality");
                });

            modelBuilder.Entity("Exam.Entities.Periods.SemesterSpeciality", b =>
                {
                    b.HasOne("Exam.Entities.Periods.SemesterDepartment", "SemesterDepartment")
                        .WithMany("SemesterSpecialities")
                        .HasForeignKey("SemesterDepartmentId");

                    b.HasOne("Exam.Entities.Periods.YearSpeciality", "YearSpeciality")
                        .WithMany("SemesterSpecialities")
                        .HasForeignKey("YearSpecialityId");

                    b.Navigation("SemesterDepartment");

                    b.Navigation("YearSpeciality");
                });

            modelBuilder.Entity("Exam.Entities.Periods.SemesterStudent", b =>
                {
                    b.HasOne("Exam.Entities.Periods.SemesterLevel", "SemesterLevel")
                        .WithMany()
                        .HasForeignKey("SemesterLevelId");

                    b.HasOne("Exam.Entities.Periods.SemesterLevelSpeciality", "SemesterLevelSpeciality")
                        .WithMany()
                        .HasForeignKey("SemesterLevelSpecialityId");

                    b.HasOne("Exam.Entities.Periods.YearStudent", "YearStudent")
                        .WithMany("SemesterStudents")
                        .HasForeignKey("YearStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SemesterLevel");

                    b.Navigation("SemesterLevelSpeciality");

                    b.Navigation("YearStudent");
                });

            modelBuilder.Entity("Exam.Entities.Periods.SemesterTeacher", b =>
                {
                    b.HasOne("Exam.Entities.Periods.SemesterDepartment", "SemesterDepartment")
                        .WithMany("SemesterTeachers")
                        .HasForeignKey("SemesterDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam.Entities.Periods.YearTeacher", "YearTeacher")
                        .WithMany("SemesterTeachers")
                        .HasForeignKey("YearTeacherId");

                    b.Navigation("SemesterDepartment");

                    b.Navigation("YearTeacher");
                });

            modelBuilder.Entity("Exam.Entities.Periods.Year", b =>
                {
                    b.HasOne("Exam.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Exam.Entities.Periods.YearDepartment", b =>
                {
                    b.HasOne("Exam.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Exam.Entities.Periods.Year", "Year")
                        .WithMany("YearDepartments")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Exam.Entities.Periods.YearLevel", b =>
                {
                    b.HasOne("Exam.Entities.Level", "Level")
                        .WithMany("YearLevels")
                        .HasForeignKey("LevelId");

                    b.HasOne("Exam.Entities.Periods.YearDepartment", "YearDepartment")
                        .WithMany("YearLevels")
                        .HasForeignKey("YearDepartmentId");

                    b.Navigation("Level");

                    b.Navigation("YearDepartment");
                });

            modelBuilder.Entity("Exam.Entities.Periods.YearLevelSpeciality", b =>
                {
                    b.HasOne("Exam.Entities.LevelSpeciality", "LevelSpeciality")
                        .WithMany("YearLevelSpecialities")
                        .HasForeignKey("LevelSpecialityId");

                    b.HasOne("Exam.Entities.Periods.YearLevel", "YearLevel")
                        .WithMany("YearLevelSpecialities")
                        .HasForeignKey("YearLevelId");

                    b.HasOne("Exam.Entities.Periods.YearSpeciality", "YearSpeciality")
                        .WithMany("YearLevelSpecialities")
                        .HasForeignKey("YearSpecialityId");

                    b.Navigation("LevelSpeciality");

                    b.Navigation("YearLevel");

                    b.Navigation("YearSpeciality");
                });

            modelBuilder.Entity("Exam.Entities.Periods.YearSpeciality", b =>
                {
                    b.HasOne("Exam.Entities.Speciality", "Speciality")
                        .WithMany("YearSpecialities")
                        .HasForeignKey("SpecialityId");

                    b.HasOne("Exam.Entities.Periods.YearDepartment", "YearDepartment")
                        .WithMany("YearSpecialities")
                        .HasForeignKey("YearDepartmentId");

                    b.Navigation("Speciality");

                    b.Navigation("YearDepartment");
                });

            modelBuilder.Entity("Exam.Entities.Periods.YearStudent", b =>
                {
                    b.HasOne("Exam.Entities.Student", "Student")
                        .WithMany("YearStudents")
                        .HasForeignKey("StudentId");

                    b.HasOne("Exam.Entities.Periods.YearLevel", "YearLevel")
                        .WithMany("YearStudents")
                        .HasForeignKey("YearLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam.Entities.Periods.YearLevelSpeciality", "YearLevelSpeciality")
                        .WithMany("YearStudents")
                        .HasForeignKey("YearLevelSpecialityId");

                    b.Navigation("Student");

                    b.Navigation("YearLevel");

                    b.Navigation("YearLevelSpeciality");
                });

            modelBuilder.Entity("Exam.Entities.Periods.YearTeacher", b =>
                {
                    b.HasOne("Exam.Entities.Teacher", "Teacher")
                        .WithMany("YearTeachers")
                        .HasForeignKey("TeacherId");

                    b.HasOne("Exam.Entities.Periods.YearDepartment", "YearDepartment")
                        .WithMany("YearTeachers")
                        .HasForeignKey("YearDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");

                    b.Navigation("YearDepartment");
                });

            modelBuilder.Entity("Exam.Entities.Planner", b =>
                {
                    b.HasOne("Exam.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Exam.Entities.Principal", b =>
                {
                    b.HasOne("Exam.Entities.Department", "Department")
                        .WithMany("Principals")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam.Entities.Member", "Member")
                        .WithOne("Principal")
                        .HasForeignKey("Exam.Entities.Principal", "MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Exam.Entities.Room", b =>
                {
                    b.HasOne("Exam.Entities.Department", "Department")
                        .WithMany("Rooms")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Exam.Entities.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId");

                    b.HasOne("Exam.Entities.School", "School")
                        .WithMany("Rooms")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Level");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Exam.Entities.School", b =>
                {
                    b.HasOne("Exam.Entities.Member", "Principal")
                        .WithMany()
                        .HasForeignKey("PrincipalId1");

                    b.Navigation("Principal");
                });

            modelBuilder.Entity("Exam.Entities.ScorePaper", b =>
                {
                    b.HasOne("Exam.Entities.Paper", "Paper")
                        .WithMany("ScorePapers")
                        .HasForeignKey("PaperId");

                    b.HasOne("Exam.Entities.TestScore", "TestScore")
                        .WithMany()
                        .HasForeignKey("TestScoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paper");

                    b.Navigation("TestScore");
                });

            modelBuilder.Entity("Exam.Entities.Secretary", b =>
                {
                    b.HasOne("Exam.Entities.Department", "Department")
                        .WithMany("Secretaries")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Exam.Entities.Speciality", b =>
                {
                    b.HasOne("Exam.Entities.Department", "Department")
                        .WithMany("Specialities")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Exam.Entities.Student", b =>
                {
                    b.HasOne("Exam.Entities.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Exam.Entities.Level", "Level")
                        .WithMany("Students")
                        .HasForeignKey("LevelId");

                    b.HasOne("Exam.Entities.LevelSpeciality", "LevelSpeciality")
                        .WithMany("Students")
                        .HasForeignKey("LevelSpecialityId");

                    b.HasOne("Exam.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Level");

                    b.Navigation("LevelSpeciality");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Exam.Entities.Supervisor", b =>
                {
                    b.HasOne("Exam.Entities.Department", "Department")
                        .WithMany("Supervisors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Exam.Entities.Teacher", b =>
                {
                    b.HasOne("Exam.Entities.Department", "Department")
                        .WithMany("Teachers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Exam.Entities.Test", b =>
                {
                    b.HasOne("Exam.Entities.ExaminationLevel", "ExaminationLevel")
                        .WithMany("Tests")
                        .HasForeignKey("ExaminationLevelId");

                    b.HasOne("Exam.Entities.Periods.SemesterCourse", "SemesterCourse")
                        .WithMany("Tests")
                        .HasForeignKey("SemesterCourseId");

                    b.Navigation("ExaminationLevel");

                    b.Navigation("SemesterCourse");
                });

            modelBuilder.Entity("Exam.Entities.TestGroup", b =>
                {
                    b.HasOne("Exam.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.HasOne("Exam.Entities.Test", "Test")
                        .WithMany("Groups")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Exam.Entities.TestGroupCorrector", b =>
                {
                    b.HasOne("Exam.Entities.Corrector", "Corrector")
                        .WithMany("TestGroupCorrectors")
                        .HasForeignKey("CorrectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam.Entities.TestGroup", "TestGroup")
                        .WithMany("TestGroupCorrectors")
                        .HasForeignKey("TestGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corrector");

                    b.Navigation("TestGroup");
                });

            modelBuilder.Entity("Exam.Entities.TestGroupSecretary", b =>
                {
                    b.HasOne("Exam.Entities.Secretary", "Secretary")
                        .WithMany()
                        .HasForeignKey("SecretaryId");

                    b.HasOne("Exam.Entities.TestGroup", "TestGroup")
                        .WithMany("TestGroupSecretaries")
                        .HasForeignKey("TestGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Secretary");

                    b.Navigation("TestGroup");
                });

            modelBuilder.Entity("Exam.Entities.TestGroupSupervisor", b =>
                {
                    b.HasOne("Exam.Entities.Supervisor", "Supervisor")
                        .WithMany("TestGroupSupervisors")
                        .HasForeignKey("SupervisorId");

                    b.HasOne("Exam.Entities.TestGroup", "TestGroup")
                        .WithMany("TestGroupSupervisors")
                        .HasForeignKey("TestGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supervisor");

                    b.Navigation("TestGroup");
                });

            modelBuilder.Entity("Exam.Entities.TestLevelSpeciality", b =>
                {
                    b.HasOne("Exam.Entities.ExaminationLevelSpeciality", "ExaminationLevelSpeciality")
                        .WithMany("TestLevelSpecialities")
                        .HasForeignKey("ExaminationLevelSpecialityId");

                    b.HasOne("Exam.Entities.Periods.SemesterCourseLevelSpeciality", "SemesterCourseLevelSpeciality")
                        .WithMany("TestLevelSpecialities")
                        .HasForeignKey("SemesterCourseLevelSpecialityId");

                    b.HasOne("Exam.Entities.Test", "Test")
                        .WithMany("TestLevelSpecialities")
                        .HasForeignKey("TestId");

                    b.Navigation("ExaminationLevelSpeciality");

                    b.Navigation("SemesterCourseLevelSpeciality");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Exam.Entities.TestScore", b =>
                {
                    b.HasOne("Exam.Entities.Test", "Test")
                        .WithMany("TestScores")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Exam.Entities.Corrector", b =>
                {
                    b.Navigation("TestGroupCorrectors");
                });

            modelBuilder.Entity("Exam.Entities.Courses.Course", b =>
                {
                    b.Navigation("CourseLevelSpecialities");

                    b.Navigation("CourseTeachers");

                    b.Navigation("Scores");
                });

            modelBuilder.Entity("Exam.Entities.Courses.CourseHour", b =>
                {
                    b.Navigation("CourseSessions");
                });

            modelBuilder.Entity("Exam.Entities.Courses.CourseLevelSpeciality", b =>
                {
                    b.Navigation("SemesterCourseLevelSpecialities");
                });

            modelBuilder.Entity("Exam.Entities.Department", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Correctors");

                    b.Navigation("Levels");

                    b.Navigation("Principals");

                    b.Navigation("Rooms");

                    b.Navigation("Secretaries");

                    b.Navigation("Specialities");

                    b.Navigation("Students");

                    b.Navigation("Supervisors");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Exam.Entities.Examination", b =>
                {
                    b.Navigation("ExaminationDepartments");
                });

            modelBuilder.Entity("Exam.Entities.ExaminationDepartment", b =>
                {
                    b.Navigation("ExaminationLevels");

                    b.Navigation("ExaminationSpecialities");
                });

            modelBuilder.Entity("Exam.Entities.ExaminationLevel", b =>
                {
                    b.Navigation("ExaminationLevelSpecialities");

                    b.Navigation("ExaminationStudents");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Exam.Entities.ExaminationLevelSpeciality", b =>
                {
                    b.Navigation("ExaminationStudents");

                    b.Navigation("TestLevelSpecialities");
                });

            modelBuilder.Entity("Exam.Entities.ExaminationSpeciality", b =>
                {
                    b.Navigation("ExaminationLevelSpecialities");
                });

            modelBuilder.Entity("Exam.Entities.ExaminationStudent", b =>
                {
                    b.Navigation("Papers");
                });

            modelBuilder.Entity("Exam.Entities.Level", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Courses");

                    b.Navigation("LevelSpecialities");

                    b.Navigation("Students");

                    b.Navigation("YearLevels");
                });

            modelBuilder.Entity("Exam.Entities.LevelSpeciality", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CourseLevelSpecialities");

                    b.Navigation("Students");

                    b.Navigation("YearLevelSpecialities");
                });

            modelBuilder.Entity("Exam.Entities.Member", b =>
                {
                    b.Navigation("Corrector");

                    b.Navigation("Principal");
                });

            modelBuilder.Entity("Exam.Entities.Paper", b =>
                {
                    b.Navigation("Contests");

                    b.Navigation("PaperFiles");

                    b.Navigation("ScorePapers");
                });

            modelBuilder.Entity("Exam.Entities.Periods.Semester", b =>
                {
                    b.Navigation("Examinations");

                    b.Navigation("SemesterDepartments");
                });

            modelBuilder.Entity("Exam.Entities.Periods.SemesterCourse", b =>
                {
                    b.Navigation("CourseHours");

                    b.Navigation("CourseSessions");

                    b.Navigation("SemesterCourseLevelSpecialities");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Exam.Entities.Periods.SemesterCourseLevelSpeciality", b =>
                {
                    b.Navigation("TestLevelSpecialities");
                });

            modelBuilder.Entity("Exam.Entities.Periods.SemesterCourseTeacher", b =>
                {
                    b.Navigation("CourseHours");

                    b.Navigation("CourseSessions");
                });

            modelBuilder.Entity("Exam.Entities.Periods.SemesterDepartment", b =>
                {
                    b.Navigation("ExaminationDepartments");

                    b.Navigation("SemesterLevels");

                    b.Navigation("SemesterSpecialities");

                    b.Navigation("SemesterTeachers");
                });

            modelBuilder.Entity("Exam.Entities.Periods.SemesterLevel", b =>
                {
                    b.Navigation("ExaminationLevels");

                    b.Navigation("SemesterLevelSpecialities");
                });

            modelBuilder.Entity("Exam.Entities.Periods.SemesterLevelSpeciality", b =>
                {
                    b.Navigation("ExaminationLevelSpecialities");

                    b.Navigation("SemesterCourseLevelSpecialities");
                });

            modelBuilder.Entity("Exam.Entities.Periods.SemesterSpeciality", b =>
                {
                    b.Navigation("ExaminationSpecialities");

                    b.Navigation("SemesterLevelSpecialities");
                });

            modelBuilder.Entity("Exam.Entities.Periods.SemesterTeacher", b =>
                {
                    b.Navigation("SemesterCourseTeachers");
                });

            modelBuilder.Entity("Exam.Entities.Periods.Year", b =>
                {
                    b.Navigation("Semesters");

                    b.Navigation("YearDepartments");
                });

            modelBuilder.Entity("Exam.Entities.Periods.YearDepartment", b =>
                {
                    b.Navigation("SemesterDepartments");

                    b.Navigation("YearLevels");

                    b.Navigation("YearSpecialities");

                    b.Navigation("YearTeachers");
                });

            modelBuilder.Entity("Exam.Entities.Periods.YearLevel", b =>
                {
                    b.Navigation("SemesterLevels");

                    b.Navigation("YearLevelSpecialities");

                    b.Navigation("YearStudents");
                });

            modelBuilder.Entity("Exam.Entities.Periods.YearLevelSpeciality", b =>
                {
                    b.Navigation("SemesterLevelSpecialities");

                    b.Navigation("YearStudents");
                });

            modelBuilder.Entity("Exam.Entities.Periods.YearSpeciality", b =>
                {
                    b.Navigation("SemesterSpecialities");

                    b.Navigation("YearLevelSpecialities");
                });

            modelBuilder.Entity("Exam.Entities.Periods.YearStudent", b =>
                {
                    b.Navigation("SemesterStudents");
                });

            modelBuilder.Entity("Exam.Entities.Periods.YearTeacher", b =>
                {
                    b.Navigation("SemesterTeachers");
                });

            modelBuilder.Entity("Exam.Entities.Room", b =>
                {
                    b.Navigation("CourseHours");

                    b.Navigation("CourseSessions");
                });

            modelBuilder.Entity("Exam.Entities.School", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Members");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Exam.Entities.Speciality", b =>
                {
                    b.Navigation("LevelSpecialities");

                    b.Navigation("YearSpecialities");
                });

            modelBuilder.Entity("Exam.Entities.Student", b =>
                {
                    b.Navigation("Application");

                    b.Navigation("YearStudents");
                });

            modelBuilder.Entity("Exam.Entities.Supervisor", b =>
                {
                    b.Navigation("TestGroupSupervisors");
                });

            modelBuilder.Entity("Exam.Entities.Teacher", b =>
                {
                    b.Navigation("CourseTeachers");

                    b.Navigation("YearTeachers");
                });

            modelBuilder.Entity("Exam.Entities.Test", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Papers");

                    b.Navigation("TestLevelSpecialities");

                    b.Navigation("TestScores");
                });

            modelBuilder.Entity("Exam.Entities.TestGroup", b =>
                {
                    b.Navigation("Papers");

                    b.Navigation("TestGroupCorrectors");

                    b.Navigation("TestGroupSecretaries");

                    b.Navigation("TestGroupSupervisors");
                });

            modelBuilder.Entity("Exam.Entities.TestGroupCorrector", b =>
                {
                    b.Navigation("Papers");
                });

            modelBuilder.Entity("Exam.Entities.TestGroupSecretary", b =>
                {
                    b.Navigation("Papers");
                });

            modelBuilder.Entity("Exam.Entities.TestLevelSpeciality", b =>
                {
                    b.Navigation("Papers");
                });
#pragma warning restore 612, 618
        }
    }
}
